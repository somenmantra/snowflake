-- Below set of commands are the admin commands to create a role who can manage the tags.
USE ROLE USERADMIN;
CREATE ROLE TAG_ADMIN_RL;
USE ROLE ACCOUNTADMIN;
GRANT CREATE TAG ON SCHEMA DEMO_DB_TG.DEMO_SCHEMA_TG TO ROLE TAG_ADMIN_RL;
GRANT APPLY TAG ON ACCOUNT TO ROLE TAG_ADMIN_RL;

--Giving permissions for other objects to the same role.
GRANT ALL ON DATABASE DEMO_DB_TG TO ROLE TAG_ADMIN_RL;
GRANT ALL ON SCHEMA DEMO_SCHEMA_TG TO ROLE TAG_ADMIN_RL;
GRANT ALL ON TABLE DEMO_DB_TG.DEMO_SCHEMA_TG.DEMO_TABLE_TG_V1 TO ROLE TAG_ADMIN_RL;  --> Since this table already existed.

--Giving the grants to the users for managing the tags.
GRANT ROLE TAG_ADMIN_RL TO USER SOMEN202306;

USE ROLE TAG_ADMIN_RL;     --> Using this role we can do the tag management at an account level.

-- Some objects also we create.
CREATE TABLE DEMO_DB_TG.DEMO_SCHEMA_TG.DEMO_TABLE_TG_V2 AS SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCDS_SF10TCL.CUSTOMER LIMIT 1000;
CREATE VIEW DEMO_DB_TG.DEMO_SCHEMA_TG.DEMO_VIEW_VW_V2 
COMMENT='PII data' 
AS SELECT C_CUSTOMER_SK, C_SALUTATION, C_FIRST_NAME, C_LAST_NAME FROM DEMO_DB_TG.DEMO_SCHEMA_TG.DEMO_TABLE_TG_V2;

-- Now let us create a tag.
CREATE OR REPLACE TAG DEMO_TAG;   --> This tag is now created. Please note no values OR association has been done yet.

-- Now let us assign the tags to the objects with values.
ALTER TABLE DEMO_DB_TG.DEMO_SCHEMA_TG.DEMO_TABLE_TG_V2 SET TAG DEMO_TAG = 'SALES_PII_TBL'; --Tag on a table.
ALTER VIEW  DEMO_DB_TG.DEMO_SCHEMA_TG.DEMO_VIEW_VW_V2 SET TAG DEMO_TAG = 'SALES_PII_VW'; --Tag on a view.
ALTER TABLE DEMO_DB_TG.DEMO_SCHEMA_TG.DEMO_TABLE_TG_V2 MODIFY COLUMN C_CUSTOMER_ID   --Tag on certain column of table.
CREATE WAREHOUSE DEMO_SALES_WH WITH TAG (DEMO_TAG = 'SALES_COMPUTE_WH');  -- This creates a X-SMALL warehouse and also tagged.

-- Tag discovery commands:
SHOW TAGS;
SELECT * FROM SNOWFLAKE.ACCOUNT_USAGE.TAG_REFERENCES WHERE TAG_NAME='DEMO_TAG';
SELECT * FROM SNOWFLAKE.ACCOUNT_USAGE.TAGS;
SELECT SYSTEM$GET_TAG('DEMO_TAG', 'DEMO_TABLE_TG_V2', 'TABLE');
SELECT SYSTEM$GET_TAG('DEMO_TAG', 'DEMO_TABLE_TG_V2.C_CUSTOMER_ID', 'COLUMN');
SELECT SYSTEM$GET_TAG('DEMO_TAG', 'DEMO_VIEW_VW_V2', 'TABLE');


---- SET 2 ---
-- Use Case Illustration
The column "C_CUSTOMER_ID" in the table 
"DEMO_DB_TG.DEMO_SCHEMA_TG.DEMO_TABLE_TG_V2" to be 'masked' since this column is 
already tagged as explained above.

-- Tag name to be used for tag based masking
"DEMO_TAG" is the tag name.
Exact qualifier --> DEMO_DB_TG.DEMO_SCHEMA_TG.DEMO_TAG(schema level object)

-- Creating the role for applying the masking policy
CREATE OR REPLACE ROLE MASKING_TAG_BASED_RL;
GRANT CREATE MASKING POLICY ON SCHEMA DEMO_DB_TG.DEMO_SCHEMA_TG TO ROLE MASKING_TAG_BASED_RL;
GRANT CREATE MASKING POLICY ON ACCOUNT TO ROLE MASKING_TAG_BASED_RL;

USE ROLE ACCOUNTADMIN;
GRANT ALL ON DATABASE DEMO_DB_TG TO ROLE MASKING_TAG_BASED_RL;
GRANT ALL ON SCHEMA DEMO_DB_TG.DEMO_SCHEMA_TG TO ROLE MASKING_TAG_BASED_RL;
GRANT SELECT ON TABLE DEMO_DB_TG.DEMO_SCHEMA_TG.DEMO_TABLE_TG_V2 TO ROLE MASKING_TAG_BASED_RL;
GRANT USAGE ON WAREHOUSE COMPUTE_WH TO ROLE MASKING_TAG_BASED_RL;
GRANT ROLE MASKING_TAG_BASED_RL TO USER SOMEN202306;


--Create a masking policy.
USE ROLE MASKING_TAG_BASED_RL;
CREATE OR REPLACE MASKING POLICY DEMO_MASK_PII AS (val string) RETURNS STRING ->
  CASE
    WHEN current_role() in ('ACCOUNTADMIN') then val
    ELSE '***MASKED***'
  END;

  -- Apply the masking policy to the TAG
ALTER TAG DEMO_DB_TG.DEMO_SCHEMA_TG.DEMO_TAG SET MASKING POLICY DEMO_MASK_PII;



